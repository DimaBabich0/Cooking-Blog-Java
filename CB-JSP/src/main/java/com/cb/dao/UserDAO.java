package com.cb.dao;

import com.cb.model.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class UserDAO {
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:FREE";
    private static final String USER = "SYS AS SYSDBA";
    private static final String PASSWORD = "1";

    public UserDAO() {
        createTableIfNotExists();
    }

    private Connection getConnection() {
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            return DriverManager.getConnection(DB_URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("Oracle JDBC Driver not found", e);
        } catch (SQLException e) {
            throw new RuntimeException("Failed to connect to the database", e);
        }
    }

    private void createTableIfNotExists() {
        String sql = """
            BEGIN
                EXECUTE IMMEDIATE '
                    CREATE TABLE CB_Users (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        username VARCHAR2(30) NOT NULL,
                        first_name VARCHAR2(30),
                        last_name VARCHAR2(30),
                        email VARCHAR2(100) UNIQUE NOT NULL,
                        password_hash VARCHAR2(255) NOT NULL,
                        password_salt VARCHAR2(255) NOT NULL,
                        role VARCHAR2(20),
                        photo_url VARCHAR2(100),
                        created_at DATE NOT NULL
                    )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
            """;

        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            throw new RuntimeException("Помилка при створенні таблиці CB_Users: " + e.getMessage(), e);
        }
    }

    public void addUser(User user) {
        String sql = """
            INSERT INTO CB_Users
            (username, first_name, last_name, email, password_hash, password_salt, role, photo_url, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """;

        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, user.getUsername());
            ps.setString(2, user.getFirstName());
            ps.setString(3, user.getLastName());
            ps.setString(4, user.getEmail());
            ps.setString(5, user.getPasswordHash());
            ps.setString(6, user.getPasswordSalt());
            ps.setString(7, user.getRole());
            ps.setString(8, user.getPhotoUrl());
            ps.setDate(9, new java.sql.Date(user.getCreatedAt().getTime()));
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Помилка при додаванні користувача: " + e.getMessage(), e);
        }
    }

    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM CB_Users ORDER BY id";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                User u = new User();
                u.setId(rs.getLong("id"));
                u.setUsername(rs.getString("username"));
                u.setFirstName(rs.getString("first_name"));
                u.setLastName(rs.getString("last_name"));
                u.setEmail(rs.getString("email"));
                u.setPasswordHash(rs.getString("password_hash"));
                u.setPasswordSalt(rs.getString("password_salt"));
                u.setRole(rs.getString("role"));
                u.setPhotoUrl(rs.getString("photo_url"));
                u.setCreatedAt(rs.getDate("created_at"));
                users.add(u);
            }
        } catch (SQLException e) {
            throw new RuntimeException("Помилка при отриманні користувачів: " + e.getMessage(), e);
        }

        return users;
    }

    public void deleteUserByUsername(String username) {
        String sql = "DELETE FROM CB_Users WHERE username = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Помилка при видаленні користувача: " + e.getMessage(), e);
        }
    }
    
    public Optional<User> findByEmail(String email) {
        String sql = "SELECT * FROM CB_Users WHERE email = ?";
        try (Connection conn = getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    User user = new User();
                    user.setId(rs.getLong("id"));
                    user.setUsername(rs.getString("username"));
                    user.setFirstName(rs.getString("first_name"));
                    user.setLastName(rs.getString("last_name"));
                    user.setEmail(rs.getString("email"));
                    user.setPasswordHash(rs.getString("password_hash"));
                    user.setPasswordSalt(rs.getString("password_salt"));
                    user.setRole(rs.getString("role"));
                    user.setPhotoUrl(rs.getString("photo_url"));
                    user.setCreatedAt(rs.getDate("created_at"));
                    return Optional.of(user);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Помилка при пошуку користувача: " + e.getMessage(), e);
        }
        return Optional.empty();
    }
}
